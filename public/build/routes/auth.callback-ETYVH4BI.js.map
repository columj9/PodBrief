{
  "version": 3,
  "sources": ["../../../app/routes/auth.callback.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/auth.callback.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/auth.callback.tsx\");\n  import.meta.hot.lastModified = \"1741246885624.4526\";\n}\n// REMIX HMR END\n\nimport { redirect } from \"@remix-run/node\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"@remix-run/react\";\nimport { supabase } from \"~/utils/supabase.server\";\nimport { createUserSession } from \"~/utils/session.server\";\n// This will handle the server-side part (if code parameter is present)\nexport async function loader({\n  request\n}) {\n  const url = new URL(request.url);\n  console.log(\"Full callback URL:\", url.toString());\n  console.log(\"Search params:\", Object.fromEntries(url.searchParams));\n\n  // Get the code from the URL\n  const code = url.searchParams.get(\"code\");\n  const next = url.searchParams.get(\"next\") || \"/dashboard\";\n\n  // If we have a code, exchange it for a session\n  if (code) {\n    try {\n      console.log(\"Attempting to exchange code for session...\");\n      const {\n        data,\n        error\n      } = await supabase.auth.exchangeCodeForSession(code);\n      if (error) {\n        console.error(\"Exchange error:\", error);\n        return redirect(`/login?error=${encodeURIComponent(error.message)}`);\n      }\n      if (!data?.session) {\n        console.error(\"No session in exchange response\");\n        return redirect(\"/login?error=No session created\");\n      }\n      console.log(\"Session created successfully\");\n      return createUserSession(data.session.access_token, next);\n    } catch (error) {\n      console.error(\"Auth callback error:\", error);\n      return redirect(\"/login?error=Authentication failed\");\n    }\n  }\n\n  // If there's no code, return the component to handle hash fragment\n  return {};\n}\n\n// This component will handle the client-side part (for access_token in hash)\nexport default function AuthCallback() {\n  _s();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const next = searchParams.get(\"next\") || \"/dashboard\";\n  useEffect(() => {\n    // Process hash fragment on client side\n    const hash = window.location.hash.substring(1);\n    if (hash) {\n      const params = new URLSearchParams(hash);\n      const accessToken = params.get(\"access_token\");\n      console.log(\"Found access_token in fragment\");\n      if (accessToken) {\n        // Create a form and post to our server to create a session\n        const form = document.createElement(\"form\");\n        form.method = \"post\";\n        form.action = \"/auth/session\";\n        const tokenInput = document.createElement(\"input\");\n        tokenInput.type = \"hidden\";\n        tokenInput.name = \"access_token\";\n        tokenInput.value = accessToken;\n        const nextInput = document.createElement(\"input\");\n        nextInput.type = \"hidden\";\n        nextInput.name = \"next\";\n        nextInput.value = next;\n        form.appendChild(tokenInput);\n        form.appendChild(nextInput);\n        document.body.appendChild(form);\n        form.submit();\n        return;\n      }\n    }\n\n    // If no access token in hash, redirect back to login\n    navigate(\"/login?error=No authentication token provided\");\n  }, [navigate, next]);\n  return <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n      <div className=\"text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Processing authentication...</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Please wait while we complete your sign-in.</p>\n      </div>\n    </div>;\n}\n_s(AuthCallback, \"BL0/uIvqgnY+m2kKjm25nXv/8uc=\", false, function () {\n  return [useNavigate, useSearchParams];\n});\n_c = AuthCallback;\nvar _c;\n$RefreshReg$(_c, \"AuthCallback\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAyB;AACzB,mBAA0B;AAE1B,sBAAyB;AACzB,qBAAkC;AAgF1B;AAxGR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mCAAqC,EAAE;AAAA,EAChF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA8B;AAC9B,cAAY,IAAI,eAAe;AACjC;AAiDe,SAAR,eAAgC;AACrC,KAAG;AACH,QAAM,WAAW,YAAY;AAC7B,QAAM,CAAC,YAAY,IAAI,gBAAgB;AACvC,QAAM,OAAO,aAAa,IAAI,MAAM,KAAK;AACzC,8BAAU,MAAM;AAEd,UAAM,OAAO,OAAO,SAAS,KAAK,UAAU,CAAC;AAC7C,QAAI,MAAM;AACR,YAAM,SAAS,IAAI,gBAAgB,IAAI;AACvC,YAAM,cAAc,OAAO,IAAI,cAAc;AAC7C,cAAQ,IAAI,gCAAgC;AAC5C,UAAI,aAAa;AAEf,cAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,aAAK,SAAS;AACd,aAAK,SAAS;AACd,cAAM,aAAa,SAAS,cAAc,OAAO;AACjD,mBAAW,OAAO;AAClB,mBAAW,OAAO;AAClB,mBAAW,QAAQ;AACnB,cAAM,YAAY,SAAS,cAAc,OAAO;AAChD,kBAAU,OAAO;AACjB,kBAAU,OAAO;AACjB,kBAAU,QAAQ;AAClB,aAAK,YAAY,UAAU;AAC3B,aAAK,YAAY,SAAS;AAC1B,iBAAS,KAAK,YAAY,IAAI;AAC9B,aAAK,OAAO;AACZ;AAAA,MACF;AAAA,IACF;AAGA,aAAS,+CAA+C;AAAA,EAC1D,GAAG,CAAC,UAAU,IAAI,CAAC;AACnB,SAAO,mDAAC,SAAI,WAAU,6EAClB,6DAAC,SAAI,WAAU,eACb;AAAA,uDAAC,QAAG,WAAU,8BAA6B,4CAA3C;AAAA;AAAA;AAAA;AAAA,WAAuE;AAAA,IACvE,mDAAC,OAAE,WAAU,oCAAmC,2DAAhD;AAAA;AAAA;AAAA;AAAA,WAA2F;AAAA,OAF7F;AAAA;AAAA;AAAA;AAAA,SAGA,KAJG;AAAA;AAAA;AAAA;AAAA,SAKL;AACJ;AACA,GAAG,cAAc,gCAAgC,OAAO,WAAY;AAClE,SAAO,CAAC,aAAa,eAAe;AACtC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,cAAc;AAE/B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
