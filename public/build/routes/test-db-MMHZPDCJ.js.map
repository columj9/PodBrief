{
  "version": 3,
  "sources": ["../../../app/routes/test-db.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/test-db.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/test-db.tsx\");\n  import.meta.hot.lastModified = \"1741230824943.8093\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { supabase } from '~/utils/supabase.server';\nexport async function loader() {\n  try {\n    // Test the connection by getting the current time from Supabase\n    const {\n      data,\n      error\n    } = await supabase.from('_realtime').select('now()');\n    if (error) throw error;\n    return json({\n      status: 'Connected to Supabase!',\n      timestamp: data?.[0]?.now\n    });\n  } catch (error) {\n    console.error('Database Error:', error);\n    return json({\n      status: 'Error connecting to Supabase',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}\nexport default function TestDB() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"p-8\">\n      <h1 className=\"text-2xl font-bold mb-4\">Database Connection Test</h1>\n      <pre className=\"bg-gray-100 dark:bg-gray-800 p-4 rounded\">\n        {JSON.stringify(data, null, 2)}\n      </pre>\n    </div>;\n}\n_s(TestDB, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = TestDB;\nvar _c;\n$RefreshReg$(_c, \"TestDB\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAErB,sBAAyB;AAyBnB;AA/CN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6BAA+B,EAAE;AAAA,EAC1E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwB;AACxB,cAAY,IAAI,eAAe;AACjC;AA0Be,SAAR,SAA0B;AAC/B,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,SAAI,WAAU,OAClB;AAAA,uDAAC,QAAG,WAAU,2BAA0B,wCAAxC;AAAA;AAAA;AAAA;AAAA,WAAgE;AAAA,IAChE,mDAAC,SAAI,WAAU,4CACZ,eAAK,UAAU,MAAM,MAAM,CAAC,KAD/B;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAJG;AAAA;AAAA;AAAA;AAAA,SAKL;AACJ;AACA,GAAG,QAAQ,gCAAgC,OAAO,WAAY;AAC5D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,QAAQ;AAEzB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
